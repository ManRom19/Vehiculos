{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reducer = exports.actionCreators = void 0; // ----------------\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\n\nexports.actionCreators = {\n  requestVehiculos: function requestVehiculos(page, items) {\n    return function (dispatch, getState) {\n      // Only load data if it's something we don't already have (and are not already loading)\n      var appState = getState();\n\n      if (appState && appState.tablaVehiculos) {\n        fetch(sessionStorage.getItem(\"apiUrl\") + 'api/Careers/v1/Vehiculo/getVehiculos?page=' + page + '&items=' + items).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          return dispatch({\n            type: 'RECEIVE_VEHICULOS',\n            vehiculos: data\n          });\n        });\n        dispatch({\n          type: 'RECEIVE_VEHICULOS',\n          vehiculos: []\n        });\n      }\n    };\n  },\n  selectVehiculo: function selectVehiculo(v) {\n    return function (dispatch, getState) {\n      var appState = getState();\n\n      if (appState && appState.tablaVehiculos) {\n        dispatch({\n          type: 'SELECT_VEHICULOS',\n          selectedVehiculo: v\n        });\n      }\n    };\n  },\n  addVehiculo: function addVehiculo(v) {\n    return function (dispatch, getState) {\n      var appState = getState();\n\n      if (appState && appState.tablaVehiculos) {\n        fetch(sessionStorage.getItem(\"apiUrl\") + 'api/Careers/v1/Vehiculo/addVehiculo').then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          return dispatch({\n            type: 'RECEIVE_VEHICULOS',\n            vehiculos: data\n          });\n        });\n        dispatch({\n          type: 'RECEIVE_VEHICULOS',\n          vehiculos: []\n        });\n      }\n    };\n  },\n  closeModal: function closeModal() {\n    return function (dispatch, getState) {\n      var appState = getState();\n\n      if (appState && appState.tablaVehiculos) {\n        dispatch({\n          type: 'CLOSE_MODAL'\n        });\n      }\n    };\n  },\n  openEmptyModal: function openEmptyModal() {\n    return function (dispatch, getState) {\n      var appState = getState();\n\n      if (appState && appState.tablaVehiculos) {\n        dispatch({\n          type: 'OPEN_EMPTY_MODAL'\n        });\n      }\n    };\n  },\n  changeItems: function changeItems(newNumItems) {\n    return function (dispatch, getState) {\n      var appState = getState();\n\n      if (appState && appState.tablaVehiculos) {\n        dispatch({\n          type: 'CHANGE_ITEMS',\n          numItems: newNumItems\n        });\n      }\n    };\n  },\n  nextPage: function nextPage() {\n    return function (dispatch, getState) {\n      var appState = getState();\n\n      if (appState && appState.tablaVehiculos) {\n        dispatch({\n          type: 'NEXT_PAGE',\n          newPage: appState.tablaVehiculos.page + 1\n        });\n      }\n    };\n  },\n  previousPage: function previousPage() {\n    return function (dispatch, getState) {\n      var appState = getState();\n\n      if (appState && appState.tablaVehiculos) {\n        var correctNewPage = appState.tablaVehiculos.page - 1;\n\n        if (correctNewPage < 0) {\n          correctNewPage = 0;\n        }\n\n        dispatch({\n          type: 'PREVIOUS_PAGE',\n          newPage: correctNewPage\n        });\n      }\n    };\n  }\n}; // ----------------\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\n\nvar unloadedState = {\n  vehiculos: [],\n  items: 0,\n  page: 0,\n  isLoading: false,\n  selectedVehiculo: null,\n  modalIsOpen: false\n};\n\nvar reducer = function reducer(state, incomingAction) {\n  if (state === undefined) {\n    return unloadedState;\n  }\n\n  var action = incomingAction;\n\n  switch (action.type) {\n    case 'REQUEST_VEHICULOS':\n      return __assign(__assign({}, state), {\n        isLoading: true\n      });\n\n    case 'RECEIVE_VEHICULOS':\n      // Only accept the incoming data if it matches the most recent request. This ensures we correctly\n      // handle out-of-order responses.\n      return __assign(__assign({}, state), {\n        vehiculos: action.vehiculos,\n        modalIsOpen: false,\n        isLoading: false,\n        page: 0,\n        selectedVehiculo: null\n      });\n\n    case 'SELECT_VEHICULOS':\n      return __assign(__assign({}, state), {\n        selectedVehiculo: action.selectedVehiculo,\n        modalIsOpen: true\n      });\n\n    case 'ADD_VEHICULOS':\n      return __assign(__assign({}, state), {\n        isLoading: true\n      });\n\n    case 'OPEN_EMPTY_MODAL':\n      return __assign(__assign({}, state), {\n        modalIsOpen: true\n      });\n\n    case 'CLOSE_MODAL':\n      return __assign(__assign({}, state), {\n        modalIsOpen: false,\n        selectedVehiculo: null\n      });\n\n    case 'CHANGE_ITEMS':\n      return __assign(__assign({}, state), {\n        items: action.numItems\n      });\n\n    case 'NEXT_PAGE':\n      return __assign(__assign({}, state), {\n        page: action.newPage\n      });\n\n    case 'PREVIOUS_PAGE':\n      return __assign(__assign({}, state), {\n        page: action.newPage\n      });\n\n    default:\n      return state;\n  }\n};\n\nexports.reducer = reducer;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;mDAwFA;AACA;AACA;;AAEaA,yBAAiB;EAC1BC,gBAAgB,EAAE,0BAACC,IAAD,EAAeC,KAAf,EAA4B;IAAkC,iBAACC,QAAD,EAAWC,QAAX,EAAmB;MAC/F;MACA,IAAMC,QAAQ,GAAGD,QAAQ,EAAzB;;MACA,IAAIC,QAAQ,IAAIA,QAAQ,CAACC,cAAzB,EAAyC;QACrCC,KAAK,CAACC,cAAc,CAACC,OAAf,CAAuB,QAAvB,IAAmC,4CAAnC,GAAkFR,IAAlF,GAAyF,SAAzF,GAAqGC,KAAtG,CAAL,CACKQ,IADL,CACU,oBAAQ;UAAI,eAAQ,CAACC,IAAT;QAAsC,CAD5D,EAEKD,IAFL,CAEU,gBAAI;UACL,OAAOP,QAAQ,CAAC;YAAES,IAAI,EAAE,mBAAR;YAA6BC,SAAS,EAAEC;UAAxC,CAAD,CAAf;QACJ,CAJL;QAMAX,QAAQ,CAAC;UAAES,IAAI,EAAE,mBAAR;UAA6BC,SAAS,EAAE;QAAxC,CAAD,CAAR;MACH;IACJ,CAZ+E;EAY/E,CAbyB;EAe1BE,cAAc,EAAE,wBAACC,CAAD,EAAY;IAAkC,iBAACb,QAAD,EAAWC,QAAX,EAAmB;MAC7E,IAAMC,QAAQ,GAAGD,QAAQ,EAAzB;;MACA,IAAIC,QAAQ,IAAIA,QAAQ,CAACC,cAAzB,EAAyC;QACrCH,QAAQ,CAAC;UAAES,IAAI,EAAE,kBAAR;UAA4BK,gBAAgB,EAAED;QAA9C,CAAD,CAAR;MACH;IACJ,CAL6D;EAK7D,CApByB;EAsB1BE,WAAW,EAAE,qBAACF,CAAD,EAAY;IAAkC,iBAACb,QAAD,EAAWC,QAAX,EAAmB;MAC1E,IAAMC,QAAQ,GAAGD,QAAQ,EAAzB;;MACA,IAAIC,QAAQ,IAAIA,QAAQ,CAACC,cAAzB,EAAyC;QACrCC,KAAK,CAACC,cAAc,CAACC,OAAf,CAAuB,QAAvB,IAAmC,qCAApC,CAAL,CACCC,IADD,CACM,oBAAQ;UAAI,eAAQ,CAACC,IAAT;QAAsC,CADxD,EAECD,IAFD,CAEM,gBAAI;UACN,OAAOP,QAAQ,CAAC;YAAES,IAAI,EAAE,mBAAR;YAA6BC,SAAS,EAAEC;UAAxC,CAAD,CAAf;QACH,CAJD;QAMAX,QAAQ,CAAC;UAAES,IAAI,EAAE,mBAAR;UAA6BC,SAAS,EAAE;QAAxC,CAAD,CAAR;MACH;IACJ,CAX0D;EAW1D,CAjCyB;EAmC1BM,UAAU,EAAE;IAAmC,iBAAChB,QAAD,EAAWC,QAAX,EAAmB;MAC9D,IAAMC,QAAQ,GAAGD,QAAQ,EAAzB;;MACA,IAAIC,QAAQ,IAAIA,QAAQ,CAACC,cAAzB,EAAyC;QACrCH,QAAQ,CAAC;UAAES,IAAI,EAAE;QAAR,CAAD,CAAR;MACH;IACJ,CAL8C;EAK9C,CAxCyB;EA0C1BQ,cAAc,EAAE;IAAmC,iBAACjB,QAAD,EAAWC,QAAX,EAAmB;MAClE,IAAMC,QAAQ,GAAGD,QAAQ,EAAzB;;MACA,IAAIC,QAAQ,IAAIA,QAAQ,CAACC,cAAzB,EAAyC;QACrCH,QAAQ,CAAC;UAAES,IAAI,EAAE;QAAR,CAAD,CAAR;MACH;IACJ,CALkD;EAKlD,CA/CyB;EAiD1BS,WAAW,EAAE,qBAACC,WAAD,EAAoB;IAAkC,iBAACnB,QAAD,EAAWC,QAAX,EAAmB;MAClF,IAAMC,QAAQ,GAAGD,QAAQ,EAAzB;;MACA,IAAIC,QAAQ,IAAIA,QAAQ,CAACC,cAAzB,EAAyC;QACrCH,QAAQ,CAAC;UAAES,IAAI,EAAE,cAAR;UAAwBW,QAAQ,EAAED;QAAlC,CAAD,CAAR;MACH;IACJ,CALkE;EAKlE,CAtDyB;EAyD1BE,QAAQ,EAAE;IAAmC,iBAACrB,QAAD,EAAWC,QAAX,EAAmB;MAC5D,IAAMC,QAAQ,GAAGD,QAAQ,EAAzB;;MACA,IAAIC,QAAQ,IAAIA,QAAQ,CAACC,cAAzB,EAAyC;QACrCH,QAAQ,CAAC;UAAES,IAAI,EAAE,WAAR;UAAqBa,OAAO,EAAEpB,QAAQ,CAACC,cAAT,CAAwBL,IAAxB,GAA+B;QAA7D,CAAD,CAAR;MACH;IACJ,CAL4C;EAK5C,CA9DyB;EAgE1ByB,YAAY,EAAE;IAAmC,iBAACvB,QAAD,EAAWC,QAAX,EAAmB;MAChE,IAAMC,QAAQ,GAAGD,QAAQ,EAAzB;;MACA,IAAIC,QAAQ,IAAIA,QAAQ,CAACC,cAAzB,EAAyC;QACrC,IAAIqB,cAAc,GAAGtB,QAAQ,CAACC,cAAT,CAAwBL,IAAxB,GAA+B,CAApD;;QACA,IAAI0B,cAAc,GAAG,CAArB,EAAwB;UACpBA,cAAc,GAAG,CAAjB;QACH;;QACDxB,QAAQ,CAAC;UAAES,IAAI,EAAE,eAAR;UAAyBa,OAAO,EAAEE;QAAlC,CAAD,CAAR;MACH;IACJ,CATgD;EAShD;AAzEyB,CAAjB,C,CAgFb;AACA;;AAEA,IAAMC,aAAa,GAAwB;EAAEf,SAAS,EAAE,EAAb;EAAiBX,KAAK,EAAE,CAAxB;EAA2BD,IAAI,EAAE,CAAjC;EAAoC4B,SAAS,EAAE,KAA/C;EAAsDZ,gBAAgB,EAAE,IAAxE;EAA8Ea,WAAW,EAAE;AAA3F,CAA3C;;AAEO,IAAMC,OAAO,GAAiC,SAAxCA,OAAwC,CAACC,KAAD,EAAyCC,cAAzC,EAA+D;EAChH,IAAID,KAAK,KAAKE,SAAd,EAAyB;IACrB,OAAON,aAAP;EACH;;EAED,IAAMO,MAAM,GAAGF,cAAf;;EACA,QAAQE,MAAM,CAACvB,IAAf;IACI,KAAK,mBAAL;MACI,6BACOoB,KADP,GACY;QACRH,SAAS,EAAE;MADH,CADZ;;IAIJ,KAAK,mBAAL;MACI;MACA;MACA,6BACOG,KADP,GACY;QACRnB,SAAS,EAAEsB,MAAM,CAACtB,SADV;QAERiB,WAAW,EAAE,KAFL;QAGRD,SAAS,EAAE,KAHH;QAIR5B,IAAI,EAAE,CAJE;QAKRgB,gBAAgB,EAAE;MALV,CADZ;;IAQJ,KAAK,kBAAL;MACI,6BACOe,KADP,GACY;QACRf,gBAAgB,EAAEkB,MAAM,CAAClB,gBADjB;QAERa,WAAW,EAAE;MAFL,CADZ;;IAKJ,KAAK,eAAL;MACI,6BACOE,KADP,GACY;QACRH,SAAS,EAAE;MADH,CADZ;;IAIJ,KAAK,kBAAL;MACI,6BACOG,KADP,GACY;QACRF,WAAW,EAAE;MADL,CADZ;;IAKJ,KAAK,aAAL;MACI,6BACOE,KADP,GACY;QACRF,WAAW,EAAE,KADL;QAERb,gBAAgB,EAAE;MAFV,CADZ;;IAKJ,KAAK,cAAL;MACI,6BACOe,KADP,GACY;QACR9B,KAAK,EAAEiC,MAAM,CAACZ;MADN,CADZ;;IAIJ,KAAK,WAAL;MACI,6BACOS,KADP,GACY;QACR/B,IAAI,EAAEkC,MAAM,CAACV;MADL,CADZ;;IAKJ,KAAK,eAAL;MACI,6BACOO,KADP,GACY;QACR/B,IAAI,EAAEkC,MAAM,CAACV;MADL,CADZ;;IAIJ;MACI,OAAOO,KAAP;EAzDR;AA8DH,CApEM;;AAAMjC,kBAAOgC,OAAP","names":["exports","requestVehiculos","page","items","dispatch","getState","appState","tablaVehiculos","fetch","sessionStorage","getItem","then","json","type","vehiculos","data","selectVehiculo","v","selectedVehiculo","addVehiculo","closeModal","openEmptyModal","changeItems","newNumItems","numItems","nextPage","newPage","previousPage","correctNewPage","unloadedState","isLoading","modalIsOpen","reducer","state","incomingAction","undefined","action"],"sources":["C:\\Users\\manue\\Downloads\\97b922f26a01\\Prueba\\AcercaTest\\Vehiculos_FRONT\\ClientApp\\src\\store\\TablaVehiculos.ts"],"sourcesContent":["﻿import { Action, Reducer } from 'redux';\r\nimport { AppThunkAction } from './';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface TablaVehiculosState {\r\n    isLoading: boolean;\r\n    items: number;\r\n    page: number;\r\n    vehiculos: Vehiculo[];\r\n    selectedVehiculo: Vehiculo | null;\r\n    modalIsOpen: boolean;\r\n    \r\n}\r\n\r\n\r\nexport interface Vehiculo {\r\n    numPedido: number;\r\n    bastidor: number;\r\n    modelo: string;\r\n    matricula: string;\r\n    fechaEntrega: string;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n\r\ninterface RequestTablaVehiculosAction {\r\n    page: number;\r\n    items: number;\r\n    type: 'REQUEST_VEHICULOS';\r\n}\r\n\r\ninterface ReceiveTablaVehiculosAction {\r\n    type: 'RECEIVE_VEHICULOS';\r\n    vehiculos: Vehiculo[];\r\n}\r\n\r\ninterface SelectVehiculoTablaVehiculosAction {\r\n    type: 'SELECT_VEHICULOS';\r\n    selectedVehiculo: Vehiculo | null;\r\n}\r\n\r\ninterface AddVehiculoTablaVehiculosAction {\r\n    type: 'ADD_VEHICULOS';\r\n    newVehiculo: Vehiculo | null | undefined;\r\n}\r\n\r\n\r\ninterface CloseModalTablaVehiculosAction {\r\n    type: 'CLOSE_MODAL';\r\n}\r\n\r\ninterface OpenEmptyModalTablaVehiculosAction {\r\n    type: 'OPEN_EMPTY_MODAL';\r\n}\r\n\r\ninterface ChangeItemsTablaVehiculosAction {\r\n    type: 'CHANGE_ITEMS';\r\n    numItems: number;\r\n}\r\ninterface NextPageTablaVehiculosAction {\r\n    type: 'NEXT_PAGE';\r\n    newPage: number;\r\n}\r\n\r\ninterface PreviousPageTablaVehiculosAction {\r\n    type: 'PREVIOUS_PAGE';\r\n    newPage: number;\r\n}\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\ntype KnownAction =\r\n    RequestTablaVehiculosAction |\r\n    ReceiveTablaVehiculosAction |\r\n    SelectVehiculoTablaVehiculosAction |\r\n    AddVehiculoTablaVehiculosAction |\r\n    CloseModalTablaVehiculosAction |\r\n    OpenEmptyModalTablaVehiculosAction |\r\n    ChangeItemsTablaVehiculosAction |\r\n    NextPageTablaVehiculosAction |\r\n    PreviousPageTablaVehiculosAction\r\n\r\n\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    requestVehiculos: (page: number, items: number): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        // Only load data if it's something we don't already have (and are not already loading)\r\n        const appState = getState();\r\n        if (appState && appState.tablaVehiculos) {\r\n            fetch(sessionStorage.getItem(\"apiUrl\") + 'api/Careers/v1/Vehiculo/getVehiculos?page=' + page + '&items=' + items)\r\n                .then(response => response.json() as Promise<Vehiculo[]>)\r\n                .then(data => {\r\n                     return dispatch({ type: 'RECEIVE_VEHICULOS', vehiculos: data });\r\n                });\r\n\r\n            dispatch({ type: 'RECEIVE_VEHICULOS', vehiculos: []  });\r\n        }\r\n    },\r\n\r\n    selectVehiculo: (v: Vehiculo): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n        if (appState && appState.tablaVehiculos) {\r\n            dispatch({ type: 'SELECT_VEHICULOS', selectedVehiculo: v });\r\n        }\r\n    },\r\n\r\n    addVehiculo: (v: Vehiculo): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n        if (appState && appState.tablaVehiculos) {\r\n            fetch(sessionStorage.getItem(\"apiUrl\") + 'api/Careers/v1/Vehiculo/addVehiculo')\r\n            .then(response => response.json() as Promise<Vehiculo[]>)\r\n            .then(data => {\r\n                return dispatch({ type: 'RECEIVE_VEHICULOS', vehiculos: data });\r\n            });\r\n\r\n            dispatch({ type: 'RECEIVE_VEHICULOS', vehiculos: [] });\r\n        }\r\n    },\r\n\r\n    closeModal: (): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n        if (appState && appState.tablaVehiculos) {\r\n            dispatch({ type: 'CLOSE_MODAL' });\r\n        }\r\n    },\r\n\r\n    openEmptyModal: (): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n        if (appState && appState.tablaVehiculos) {\r\n            dispatch({ type: 'OPEN_EMPTY_MODAL' });\r\n        }\r\n    },\r\n\r\n    changeItems: (newNumItems: number): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n        if (appState && appState.tablaVehiculos) {\r\n            dispatch({ type: 'CHANGE_ITEMS', numItems: newNumItems });\r\n        }\r\n    },\r\n\r\n\r\n    nextPage: (): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n        if (appState && appState.tablaVehiculos) {\r\n            dispatch({ type: 'NEXT_PAGE', newPage: appState.tablaVehiculos.page + 1 });\r\n        }\r\n    },\r\n\r\n    previousPage: (): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n        if (appState && appState.tablaVehiculos) {\r\n            var correctNewPage = appState.tablaVehiculos.page - 1;\r\n            if (correctNewPage < 0) {\r\n                correctNewPage = 0;\r\n            }\r\n            dispatch({ type: 'PREVIOUS_PAGE', newPage: correctNewPage });\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nconst unloadedState: TablaVehiculosState = { vehiculos: [], items: 0, page: 0, isLoading: false, selectedVehiculo: null, modalIsOpen: false };\r\n\r\nexport const reducer: Reducer<TablaVehiculosState> = (state: TablaVehiculosState | undefined, incomingAction: Action): TablaVehiculosState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'REQUEST_VEHICULOS':\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            };\r\n        case 'RECEIVE_VEHICULOS':\r\n            // Only accept the incoming data if it matches the most recent request. This ensures we correctly\r\n            // handle out-of-order responses.\r\n            return {\r\n                ...state,\r\n                vehiculos: action.vehiculos,\r\n                modalIsOpen: false,\r\n                isLoading: false,\r\n                page: 0,\r\n                selectedVehiculo: null\r\n            };\r\n        case 'SELECT_VEHICULOS':\r\n            return {\r\n                ...state,\r\n                selectedVehiculo: action.selectedVehiculo,\r\n                modalIsOpen: true\r\n            };\r\n        case 'ADD_VEHICULOS':\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            };\r\n        case 'OPEN_EMPTY_MODAL':\r\n            return {\r\n                ...state,\r\n                modalIsOpen: true\r\n            };\r\n\r\n        case 'CLOSE_MODAL':\r\n            return {\r\n                ...state,\r\n                modalIsOpen: false,\r\n                selectedVehiculo: null\r\n            };\r\n        case 'CHANGE_ITEMS':\r\n            return {\r\n                ...state,\r\n                items: action.numItems\r\n            };\r\n        case 'NEXT_PAGE':\r\n            return {\r\n                ...state,\r\n                page: action.newPage\r\n            };\r\n\r\n        case 'PREVIOUS_PAGE':\r\n            return {\r\n                ...state,\r\n                page: action.newPage\r\n            };\r\n        default:\r\n            return state;\r\n\r\n\r\n    }\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"module"}